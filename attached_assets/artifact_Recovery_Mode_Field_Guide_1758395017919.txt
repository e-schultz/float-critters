import React, { useState } from 'react';
import { ChevronDown, ChevronRight, Circle, Square, Triangle, Zap, Battery } from 'lucide-react';

const fieldGuideData = {
  "meta": {
    "title": "Recovery Mode Navigation",
    "subtitle": "A Field Guide to Cognitive Fog & System Transitions",
    "version": "2025-09-18",
    "context": "Hit-by-truck mornings, brain fuzz patterns, and gentle emergence protocols"
  },
  "sections": [
    {
      "id": "cognitive_weather",
      "title": "Cognitive Weather Patterns",
      "icon": "circle",
      "color": "cyan",
      "entries": [
        {
          "pattern": "Hit-by-Truck Morning",
          "description": "Waking state characterized by heavy physical/mental fog, difficulty with basic transitions",
          "signals": ["20+ minutes edge-of-bed processing", "Text expanders misfiring", "Simple tasks feel overwhelming", "Need external motivators (Tim's run)"],
          "protocol": "No pressure for complex cognitive work. Focus on: caffeine → fresh air → gentle movement → basic self-care. Trust the fog will lift gradually."
        },
        {
          "pattern": "Brain Fuzz Mode",
          "description": "Reduced cognitive bandwidth with automation systems misbehaving",
          "signals": ["Text expansion triggers unexpectedly", "Asking 'what were we talking about'", "Simple tasks taking longer", "Memory gaps in conversation"],
          "protocol": "Disable complex automations temporarily. Stick to micro-tasks. Accept processing delays as normal system behavior."
        },
        {
          "pattern": "Foam Padding Improvement",
          "description": "Gradual emergence from cognitive fog with slight energy increase",
          "signals": ["Still hit by truck but with cushioning", "Able to get outside", "Fresh air providing relief", "Basic functions coming online"],
          "protocol": "Acknowledge improvement without rushing. Continue gentle activities. Caffeine + movement + fresh air supporting natural recovery curve."
        }
      ]
    },
    {
      "id": "automation_patterns",
      "title": "Automation System Behaviors",
      "icon": "zap",
      "color": "purple",
      "entries": [
        {
          "pattern": "Text Expander Misfires",
          "description": "Productivity automations triggering during low cognitive bandwidth periods",
          "signals": ["AI task templates firing unexpectedly", "Complex prompts generated when typing simple text", "Oliver Brown random name generation", "Field guide prompts appearing"],
          "protocol": "Recognize as normal automation-during-fog behavior. Temporarily disable complex expansions. Use manual typing until cognitive clarity returns."
        },
        {
          "pattern": "Helpful Tools Becoming Hindrance",
          "description": "Sophisticated productivity systems optimized for sharp cognition creating friction during recovery",
          "signals": ["Multiple automation misfires in short period", "Tools requiring mental overhead feel burdensome", "Muscle memory triggering wrong shortcuts"],
          "protocol": "Switch to manual processes temporarily. Reactivate automations incrementally as cognitive bandwidth returns. No judgment about 'productivity loss'."
        }
      ]
    },
    {
      "id": "recovery_protocols",
      "title": "Recovery Navigation Strategies",
      "icon": "battery",
      "color": "green",
      "entries": [
        {
          "pattern": "Edge-of-Bed Processing",
          "description": "Natural transition buffer allowing system to gradually come online",
          "signals": ["Sitting motionless for 10-20+ minutes", "No urgency to move immediately", "Internal systems slowly activating"],
          "protocol": "Honor the processing time. No rushing or self-judgment. This is appropriate cognitive architecture for recovery periods."
        },
        {
          "pattern": "External Motivator Deployment",
          "description": "Using structured activities to bridge from internal fog to external engagement",
          "signals": ["Tim Hortons run as movement catalyst", "Fresh air providing noticeable relief", "Simple external goals creating momentum"],
          "protocol": "Identify and deploy gentle external motivators. Caffeine, fresh air, simple walks, basic errands can provide scaffolding for emergence."
        },
        {
          "pattern": "Gentle System Acknowledgment",
          "description": "Recognizing recovery patterns without pressure or timeline expectations",
          "signals": ["'Brain fuzz what we talking about again'", "Accepting automation misfires as normal", "No pushing through, just gentle navigation"],
          "protocol": "Practice self-compassion during cognitive fog. Trust that clarity will return naturally. Focus on basic care rather than productivity."
        }
      ]
    },
    {
      "id": "context_preservation",
      "title": "Context Bridging Techniques",
      "icon": "square",
      "color": "yellow",
      "entries": [
        {
          "pattern": "Gentle Context Restoration",
          "description": "Rebuilding conversation thread without cognitive strain during fog periods",
          "signals": ["'What were we talking about' questions", "Need for simple recap", "Memory gaps in recent discussion"],
          "protocol": "Provide clear, simple context restoration. Use structured format (ctx:: timestamps, status indicators). No overwhelming detail dumps."
        },
        {
          "pattern": "Conversation Archaeology",
          "description": "Surfacing relevant context from previous sessions to bridge cognitive gaps",
          "signals": ["References to Daylio data patterns", "Connecting current state to historical patterns", "Recognition of familiar recovery cycles"],
          "protocol": "Use past conversation tools to identify patterns. Present connections gently. Help user recognize this is familiar territory, not crisis."
        }
      ]
    }
  ]
};

const iconComponents = {
  circle: Circle,
  square: Square,
  triangle: Triangle,
  zap: Zap,
  battery: Battery
};

const colorClasses = {
  cyan: 'border-cyan-400 bg-cyan-400/10',
  purple: 'border-purple-400 bg-purple-400/10',
  green: 'border-green-400 bg-green-400/10',
  yellow: 'border-yellow-400 bg-yellow-400/10'
};

export default function RecoveryFieldGuide() {
  const [expandedSections, setExpandedSections] = useState({});
  const [expandedEntries, setExpandedEntries] = useState({});

  const toggleSection = (sectionId) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };

  const toggleEntry = (entryId) => {
    setExpandedEntries(prev => ({
      ...prev,
      [entryId]: !prev[entryId]
    }));
  };

  return (
    <div className="min-h-screen bg-black text-white font-mono p-4 sm:p-6 md:p-8">
      {/* ASCII Header */}
      <div className="text-cyan-400 text-xs leading-tight mb-6">
        <pre>{`
▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒
▒▒    RECOVERY MODE FIELD GUIDE    ▒▒
▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒▓▓▒▒`}</pre>
      </div>

      {/* Meta Information */}
      <div className="mb-8">
        <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">
          {fieldGuideData.meta.title}
        </h1>
        <p className="text-gray-400 mb-2">{fieldGuideData.meta.subtitle}</p>
        <div className="text-xs text-gray-500 space-y-1">
          <div>Version: {fieldGuideData.meta.version}</div>
          <div>Context: {fieldGuideData.meta.context}</div>
        </div>
      </div>

      {/* Sections */}
      {fieldGuideData.sections.map((section) => {
        const IconComponent = iconComponents[section.icon] || Circle;
        const isExpanded = expandedSections[section.id];
        
        return (
          <div key={section.id} className="mb-6">
            {/* Section Header */}
            <button
              onClick={() => toggleSection(section.id)}
              className={`w-full text-left p-4 rounded-lg border-2 transition-all ${colorClasses[section.color]} hover:opacity-80`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <IconComponent className="w-5 h-5" />
                  <span className="text-lg font-semibold">{section.title}</span>
                </div>
                {isExpanded ? 
                  <ChevronDown className="w-5 h-5" /> : 
                  <ChevronRight className="w-5 h-5" />
                }
              </div>
            </button>

            {/* Section Content */}
            {isExpanded && (
              <div className="mt-4 space-y-3">
                {section.entries.map((entry, entryIndex) => {
                  const entryId = `${section.id}_${entryIndex}`;
                  const isEntryExpanded = expandedEntries[entryId];
                  
                  return (
                    <div key={entryIndex} className="ml-4 border-l-2 border-gray-700 pl-4">
                      <button
                        onClick={() => toggleEntry(entryId)}
                        className="w-full text-left p-3 rounded border border-gray-600 hover:border-gray-500 bg-gray-900/50"
                      >
                        <div className="flex items-center justify-between">
                          <span className="font-semibold text-sm">{entry.pattern}</span>
                          {isEntryExpanded ? 
                            <ChevronDown className="w-4 h-4" /> : 
                            <ChevronRight className="w-4 h-4" />
                          }
                        </div>
                        <p className="text-xs text-gray-400 mt-1">{entry.description}</p>
                      </button>

                      {isEntryExpanded && (
                        <div className="mt-3 p-3 bg-gray-800/30 rounded text-xs space-y-3">
                          <div>
                            <span className="text-yellow-400 font-semibold">SIGNALS:</span>
                            <ul className="mt-1 ml-4 list-disc text-gray-300">
                              {entry.signals.map((signal, idx) => (
                                <li key={idx}>{signal}</li>
                              ))}
                            </ul>
                          </div>
                          
                          <div>
                            <span className="text-green-400 font-semibold">PROTOCOL:</span>
                            <p className="mt-1 text-gray-300">{entry.protocol}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
      })}

      {/* Footer */}
      <div className="mt-12 pt-6 border-t border-gray-800 text-xs text-gray-500">
        <p>Context preserved. Recovery patterns documented. Trust the process.</p>
      </div>
    </div>
  );
}